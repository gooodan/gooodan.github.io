[{"title":"心事成林","date":"2017-09-26T16:00:00.000Z","path":"2017/09/27/20170927/","text":"忆 秋天，无论在什么地方的秋天，总是好的；可是啊，北国的秋，却特别地来地清，来得静，来的悲凉 来软微已经一个多月了，从刚到北京的炎热，到现在入秋的转凉，心里最早的那份悸动也随着秋风，吹散了许多。回想16年3月初来到软微，当时给我的感觉就是：太小了！整个学院的构成就四部分，进门的研发楼，研发楼后面的5栋，右侧的教学楼和食堂，左侧是寝室楼和实验楼。 当时租下一同学的床铺，住下些许时日后，便又觉得软微又有些可爱之处，教学楼与食堂相连，十分方便，图书馆内置于教学楼之中，虽然不大，但是适合学习，食堂外面有开水房，冬天在教室看完书，不用出教学楼，通过二楼连接食堂过道，径直去食堂吃个饭然后出来接个开水，透透气，也很是惬意的。 软微没有操场，但有一片草地，饭后绕着走一走，通常晚饭过后，我会去走上两圈，放空下大脑，那大概是一天中最惬意的时候。 考研的生活便是这样，如凉白开一般，但平淡，却又解渴，每天过的很充实。当把心沉下来，似乎才能看到你平时看不到的，理解那些所不能理解的。而那年也是我第一次经历郁达夫所说的古都的秋。 秋北方的秋天来的很干脆，道路两旁的树枝上存不了半点的绿，秋风仿佛是一双无形的大手，从树根往上将整个树撸了个精光。软微外面是一条街道，车流量不是很多，但是马路又稍显宽敞，街道上的人总是零星几个，一入秋后，整个场面显得略有些悲凉。 而南方的秋，树上总会存留些许叶子，落的不想北方这么利索，非要等进入深冬后，才肯把枝丫上零星的叶子落下来，加上南方湖泽较多，湿度较大，秋风吹来脸上会感觉到些许湿润，这让南方的秋宛如一个婉转含蓄的姑娘，半遮半掩，你多看她两眼，她便抬着手袖，捂着脸，从你的身边盈盈走过。 风干！这是我到北京后的第一感觉，每天晚上睡觉前得猛灌几口水。如果在床上没有睡着，那必定也要是干的要命，免不得从床铺上下来喝水的。这种干，在北京是一年四季的，但是到了秋天，这种干却在风中给人神清气爽的感觉。郁达夫说，北国的秋要来的清，来的静。我是十分赞同的，北方的秋风不像南方，吹的人没有那种黏滞，用个字概括就是“凉”。这种凉却又未至于冷，加之北方干燥，这种凉风吹来很是舒爽。 软微周围，建筑大多不高，人也稀少，却恰到好处的得以品尝这北国秋的滋味。","tags":[{"name":"随笔","slug":"随笔","permalink":"http://gooodan.github.io/tags/随笔/"}]},{"title":"将hexo搭建的博客从Windows转移至MacBook","date":"2017-08-27T16:00:00.000Z","path":"2017/08/28/hexo_change/","text":"前言之前在老旧的Windows本上用hexo部署了博客，后来换成了Macbook，把笔记本给老妈当广场舞播放器了，所以打算将之前搭建的博客，转移到新的电脑上来。 步骤 从官网Git下载git，在新电脑上安装，因为https速度慢，而且每次都要输入口令，常用的是使用ssh。使用下面方法创建： 打开git bash，在用户主目录下运行：ssh-keygen -t rsa -C “youremail@example.com” 把其中的邮件地址换成自己的邮件地址，然后一路回车 最后完成后，会在用户主目录下生成.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH key密钥对，id_rsa是私钥，千万不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。 登陆GitHub，打开「Settings」-&gt;「SSH and GPG keys」，然后点击「new SSH key」，填上任意Title，在Key文本框里粘贴公钥id_rsa.pub文件的内容（千万不要粘贴成私钥了！），最后点击「Add SSH Key」，你就应该看到已经添加的Key。注意：不要在git版本库中运行ssh，然后又将它提交，这样就把密码泄露出去了。 下载Node.js，并安装 打开git bash客户端，输入 npm install hexo-cli -g，开始安装hexo 下面就将原来的文件拷贝到新电脑中，但是要注意哪些文件是必须的，哪些文件是可以删除的。 讨论下哪些文件是必须拷贝的：首先是之前自己修改的文件，像站点配置_config.yml，theme文件夹里面的主题，以及source里面自己写的博客文件，这些肯定要拷贝的。除此之外，还有三个文件需要有，就是scaffolds文件夹（文章的模板）、package.json（说明使用哪些包）和.gitignore（限定在提交的时候哪些文件可以忽略）。其实，这三个文件不是我们修改的，所以即使丢失了，也没有关系，我们可以建立一个新的文件夹，然后在里面执行hexo init，就会生成这三个文件，我们只需要将它们拷贝过来使用即可。总结：_config.yml，theme/，source/，scaffolds/，package.json，.gitignore，是需要拷贝的。 再讨论下哪些文件是不必拷贝的，或者说可以删除的：首先是.git文件，无论是在站点根目录下，还是主题目录下的.git文件，都可以删掉。然后是文件夹node_modules（在用npm install会重新生成），public（这个在用hexo g时会重新生成），.deploy_git文件夹（在使用hexo d时也会重新生成），db.json文件。其实上面这些文件也就是.gitignore文件里面记载的可以忽略的内容。总结：.git/，node_modules/，public/，.deploy_git/，db.json文件需要删除。 在git bash中切换目录到新拷贝的文件夹里，使用 npm install 命令，进行模块安装。很明显我们这里没用hexo init初始化，因为有的文件我们已经拷贝生成过来了，所以不必用hexo init去整体初始化，如果不慎在此时用了hexo init，则站点的配置文件_config.yml里面内容会被清空使用默认值，所以这一步一定要慎重，不要用hexo init。 安装其他的一些必要组件，如果在node_modules里面有的，就不要重复安装了： 为了使用hexo d来部署到git上，需要安装 1npm install hexo-deployer-git --save 为了建立RSS订阅，需要安装 1npm install hexo-generator-feed --save 为了建立站点地图，需要安装 1npm install hexo-generator-sitemap --save 插件安装后，有的需要对配置文件_config.yml进行配置，具体怎么配置，可以参考上面插件在github主页上的具体说明 使用hexo g，然后使用hexo d进行部署，如果都没有出错，就转移成功了！ 版权申明作者：skycrown链接：https://www.zhihu.com/question/21193762/answer/103097754来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","tags":[{"name":"hexo","slug":"hexo","permalink":"http://gooodan.github.io/tags/hexo/"}]},{"title":"自学Java笔记02","date":"2017-04-24T16:00:00.000Z","path":"2017/04/25/自学Java笔记02/","text":"写代码首先要有思路：1、定义一个类，因为Java程序都在定义类中，Java程序都是以类的形式存在的2、定义一个主函数。目的是为了让该类可以独立的运行3、输出语句。 进制转换问题对于二进制来说0 1 0 1 0 1 164 32 16 8 4 2 1 111 = 71111 = 15对于二进制 010-101-110八进制位 2 5 6 0256对于二进制 1010-1110十六进制 10 14 0xAE结论：八进制位，其实就是二进制中的3个二进制位一个八进制位。十六进制位，其实就是二进制中的4个二进制位一个十六进制位。 变量相加（面试题）对于以下代码 123456789101112class VarDemo&#123; public static void main(Strin[] args) &#123; byte b = 4; byte b1 = 3; byte b2 = 7; b = b1 + b2; System.out.println(b); &#125;&#125; Q&amp;AQ:为什么该代码会编译失败？A:因为b1和b2是变量，而变量是不确定的，b = b1 + b2右边不确定是无法判断并赋值的，如果是b = 3 + 7是可以得出结果b = 10，因为右边是确定的整数 算数运算符（面试题）对于以下代码 123456789class VarDemo&#123; public static void main(String[] args) &#123; short s = 3; //s += 4; //在底层自动做了强制转换，相当于s = (short)(s + 4) s = s + 4; //报错：丢失精度，没有做强制转换 &#125;&#125; Q&amp;AQ:为什么s = s + 4编译失败，而s += 4却通过？A:s = s + 4报错是因为在进行加法运算后，右边进行了自动类型的提升（提升为4字节），提升后的类型不能赋给低值类型，会出现损失精度，而s += 4可以运行是因为，在赋值过程中底层做了自动强制转换。","tags":[{"name":"Java","slug":"Java","permalink":"http://gooodan.github.io/tags/Java/"}]},{"title":"自学Java笔记01","date":"2017-04-19T16:00:00.000Z","path":"2017/04/20/自学Java笔记01/","text":"配置环境变量即告诉系统，在哪里找到我要使用的工具的路径例如我的javac.exe的路径为F:\\JavaJDK\\bin那么我要在命令行任何路径调用Javac.exe就要配置环境变量。右键点击此电脑选择属性，然后按照下图箭头找到环境变量 然后点击环境变量找到path，然后点编辑 然后编辑你自己的环境变量，在这我已经编辑好了 最后，记住在配置完环境变量以后，一定要重启一次命令行窗口，这样新配置的环境变量才会生效。 关于classpath 在命令行中设置classpath，相当于告诉JVM去哪里找你要运行的任何.class文件 1set classpath = c:\\HiJava //相当于告诉JVM去c:/HiJava找任何你要运行的.class文件 如果你在F:\\Java0424\\day01中有VarDemo.class文件，那么，当你在命令行中输入 1F:\\java0424\\day01&gt;java VarDemo 命令行窗口会提示 这因为VarDemo.class文件不在c:\\HiJava路径下，而是在F:\\java0424\\day01路径下 虽然命令行中当前路径是F:\\java0424\\day01，但是由于设置了classpath，从而导致JVM只在你所设置的classpath中查找你要的.class文件。 所以，在当前路径运行一个.class文件时，如果报错，除了检查运行的文件名是否一致，还要检查是否设置了classpath 注意：设置classpath只在当前命令行窗口有效，重启命令行窗口后无效~","tags":[{"name":"Java","slug":"Java","permalink":"http://gooodan.github.io/tags/Java/"}]},{"title":"用Hexo和Github搭建博客","date":"2017-03-25T16:00:00.000Z","path":"2017/03/26/hexo-blog/","text":"上班之余，自学前端，搭建了个博客记录一些学习情况，也能锻炼下码字能力，何乐而不为~故有以下教程，以记录我为该博客所逝去的青春[toc] 1.0 准备工作 2.0 搭建github博客 2.1 创建仓库 2.2 绑定域名 3.0 配置SSH key 3.1 检测是否成功 4.0 使用hexo写博客 4.1 hexo简介 4.2 工作原理 4.3 安装] 4.4 初始化] 4.5 修改主题 4.6 上传之前 4.7上传到github 4.8 保留README.md等文件 4.9 常用hexo命令 4.10 写博客 4.10.1写博客工具 4.10.2 如何让博文列表不显示全部内容 5.0 参考 6.0 感悟 1.0 准备工作 安装了node.js、 npm，并了解相关基础知识； 拥有一个Github账号 安装了git for Windows（或者其他git客户端） 本文所使用的环境： windows10 node.js@6.9.5 git@2.12.0.1 hexo@3.2.2 2.0 搭建github博客2.1 创建仓库新建一个名为 yourusername.github.io的仓库，比如说你的github用户名是goooda，那么创建一个gooodan.github.io仓库（必须要是你的用户名，其他的名字无效），这样以后你的网站地址就是 goooda.github.io 2.2 绑定域名其实你也不用绑定域名，可以用username.github.io来访问，当然，你想用跟个性的方式来访问你的博客，那也是OK滴。首先注册个域名，就不给XX做广告了，自己按需求搜索一下，就可以了。具体的教程可以参考hexo搭建的GitHub博客绑定域名 3. 0 配置SSH key Q：为啥要配置这玩意呢？A：因为要提交代码必须要拥有github权限才行，但是直接使用账号密码，一是不安全，二是当你每次要提交代码都要输入账号密码的命令时，你会觉得很不方便。所以我们使用SSH key来解决本地和服务器的连接问题 现在检测本机是否存在SSH key，进入git命令窗口 1$ cd ~/. ssh #检测本机已存在的ssh密匙 如果提示：No such file or directory 说明你是第一次使用git。 1$ ssh-keygen -t rsa -C \"邮箱地址\" 然后连续3次回车，最后生成一个.ssh的文件夹在你的用户目录中 进入该文件夹找到id_rsa.pub文件并用记事本打开复制里面内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt;New SSH key : 将刚刚复制的内容粘贴到key那里，title随便写，保存 3.1 测验是否成功1$ ssh -T git@github.com 如果出现 Are you sure you want to continue connecting (yes/no)?，输入yes，然后会提示： Hi gooodan! You’ve successfully authenticated, but Github does not provide shell access. 此时你还要配置用户名和注册邮箱：12$ git config --global user.name “gooodan” // 你的github用户名$ git config --global user.email \"xxx@qq.com\" //注册邮箱 4.0 使用hexo写博客4.1 hexo简介Hexo是一个简单粗暴、快速强大的基于Github Pages的博客发布工具，支持Markdown格式，有众多优秀插件和主题。官网：http://hexo.iogithub：https://github.com/hexojs/hexo 4.2 原理由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信大家的心情会是这样: 所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。 4.3 安装进入到git命令窗口，输入以下命令1$ npm install -g hexo 4.4 初始化新建一个文件夹存放你的博客，比如我的是F:\\Workspaces\\hexo。12$ cd /f/Workspaces/hexo/$ hexo init hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图： 12$ hexo g # 生成public文件 $ hexo s # 开启本地预览服务 执行hexo g命令后，hexo就会在public文件夹中生成相应的文件： 这些文件将来是要提交到github上去的，而执行hexo s命令后，可以在浏览器中访问http://localhost:4000即可预览你的博客，如果页面一直加载不出来，可以参考下面这篇文章：http://blog.liuxianan.com/windows-port-bind.html第一次初始化的时候，Hexo已经帮我们写了一篇”Hello World”的文章，默认的主题是这个样子滴： 4.5 修改主题啥？我们搞了半天，就出来个这玩意？这么丑的主题我都没兴趣写博客了。 好吧，那我们别的先不做，先来搞个好看点的主题这是官方各种主题个人比较喜欢两个主题：hexo-theme-next和hexo-theme-yilia。（目前我在用的）以yilia主题为例，首先下载这个主题： 12$ cd /f/Workspaces/hexo/$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 下载后的主题都在这里： 修改hexo文件夹_config.yml文件中的theme: landscape改为theme: yilia，然后执行 1$ hexo g 来重新生成倘若出现一些莫名其妙的问题，可以先执行1$ hexo clean 来清除public的内容，然后重新生成。 4.6 上传之前在上传代码到github之前，如果你的ursername.github.io库中有代码，一定要记得把username.github.io库中的代码下载下来，因为从hexo提交代码时会把你以前的所有代码都删除掉。 4.7 上传到github那么我们如何将代码上传到github呢？首先，我们将hexo里文件代码挨个复制，然后再…… 嗯…..好吧，我们正常点正所谓：兵马未动，粮草先行。我们要上传代码到github，首先要进行一番设置。其一： 保证SSH key要配置好。其次，配置hexo文件夹中_config.yml的deploy部分：正确写法：1234deploy: type: git repository: git@github.com:gooodan/gooodan.github.io.git branch: master 错误写法：1234deploy: type: github repository: https://github.com/gooodan/gooodan.github.io.git branch: master 后面的一种写法是hexo 2.x的写法，现在不顶事了，但无论哪种写法，此时如果直接执行1$ hexo d 会报出如下错误：1Deployer not found: github 或者 Deployer not found: git 原因是还需要安装一个插件：1npm install hexo-deployer-git --save 部署这个命令一定要用git bash打开你的git bash，输入hexo d就会将本次所有改动的代码全部提交，没有改动的代码则不会。（这里要确定git bash的位置是在你hexo根目录下） 4.8 保留README.md提交之后网页上一看，发现以前其它代码都没了，此时不要慌，一些非md文件可以把他们放到source文件夹下，这里的所有文件都会原样复制（除了md文件）到public目录的： 由于hexo默认会把所有md文件都转换成html，包括README.md，所有需要每次生成之后、上传之前，手动将README.md复制到public目录，并删除README.html。 4.9 常用hexo命令常见命令1234567$ hexo new \"postname\" # 新建文章$ hexo new page \"pagename\" #新建页面$ hexo generate #生成静态页面至public目录$ hexo server #开启预览端口$ hexo deploy #部署到github$ hexo help #查看帮助$ hexo version #查看hexo版本 缩写：1234hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 组合命令：123$ hexo s -g #生成并本地预览$ hexo g -d #生成并上传$ hexo clean &amp;&amp; hexo g -d #清除、生成并上传 4.10 写博客首先，定位到我们的hexo根目录，执行命令：1$ hexo new 'my-first-blog' hexo会帮我们在_posts下生成相关md文件，我们只需要打开这个文件就可以开始写博客了。一般完整的格式如下：12345678---title: postName #文章页面上的显示名称，一般是中文date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改categories: 默认分类 #分类tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面---以下是正文 4.10.1 写博客的工具我用的是小书匠，感觉还行，当然还有其他的工具如马克飞象、dillinger、Markdownpad等。 4.10.2 如何让博文列表不显示全部内容默认情况下，生成博文目录会显示全部文章内容，如何设置文章摘要的长度呢？答案是在合适的位置加上&lt;！–more–&gt;即可。 5.0 参考http://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.htmlhttp://www.jianshu.com/p/05289a4bc8b2 6.0 感悟在用hexo和github搭建自己的博客时，遇到了一些困难但最后看到博客完成时，内心还是很欣慰的通过这个过程，我发现自己很享受编程带来的乐趣有时研究一个问题就是一晚上或者一整天一直在网上查资料，有时搞到晚上一两点第二天接着7点半爬起来挤地铁去上班，在地铁上，当别人拿着手机看新闻、聊微信和玩游戏时我却拿着Ipad睡眼惺忪的看着《 JavaScript DOM编程艺术》电子版，下班回来后接着干，最初本着转行找工作的心态接触前端现在却沉浸其中，如鱼得水仿佛为了结婚而去相亲开始迫于无奈，接触过后发现相亲对象正是你苦苦寻觅理想伴侣那般惊喜和兴奋，溢于言表。 最后没有鸡汤的博文，不是好博文： Cease to struggle and you cease to live.生命不息，奋斗不止。","tags":[{"name":"hexo","slug":"hexo","permalink":"http://gooodan.github.io/tags/hexo/"}]}]